rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Règles pour la collection rendez-vous
    match /rendez-vous/{documentId} {
      // Lecture autorisée pour tous les utilisateurs authentifiés
      allow read: if request.auth != null;
      
      // Écriture autorisée pour tous les utilisateurs authentifiés
      allow write: if request.auth != null && 
        // Validation des données requises
        request.resource.data.keys().hasAll(['date', 'time', 'clientName', 'service', 'status', 'paymentStatus']) &&
        // Validation du format de date (YYYY-MM-DD)
        request.resource.data.date is string && 
        request.resource.data.date.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$') &&
        // Validation du format d'heure (HH:MM)
        request.resource.data.time is string && 
        request.resource.data.time.matches('^[0-9]{2}:[0-9]{2}$') &&
        // Validation du nom client (non vide)
        request.resource.data.clientName is string && 
        request.resource.data.clientName.size() > 0 &&
        // Validation du service
        request.resource.data.service is string && 
        request.resource.data.service.size() > 0 &&
        // Validation du statut (valeurs autorisées)
        request.resource.data.status in ['prevu', 'arrive', 'encours', 'termine', 'annule'] &&
        // Validation du statut de paiement (valeurs autorisées)
        request.resource.data.paymentStatus in ['unpaid', 'paid', 'comped'] &&
        // Validation optionnelle du prix (si présent, doit être un nombre)
        (!('price' in request.resource.data) || request.resource.data.price is number) &&
        // Validation optionnelle du téléphone (si présent, doit être une chaîne)
        (!('clientPhone' in request.resource.data) || request.resource.data.clientPhone is string) &&
        // Validation optionnelle des notes (si présent, doit être une chaîne)
        (!('notes' in request.resource.data) || request.resource.data.notes is string);
    }

    // Règles pour les autres collections (à ajouter si nécessaire)
    match /services/{documentId} {
      allow read, write: if request.auth != null;
    }

    match /clients/{documentId} {
      allow read, write: if request.auth != null;
    }

    // Refuser l'accès à toutes les autres collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}